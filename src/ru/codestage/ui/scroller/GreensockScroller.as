/*The MIT License Copyright (c) 2011 Dmitriy [focus] Yukhanov | http://blog.codestage.ru Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package ru.codestage.ui.scroller{	import com.greensock.OverwriteManager;	import com.greensock.plugins.AutoAlphaPlugin;	import com.greensock.plugins.ColorMatrixFilterPlugin;	import com.greensock.plugins.EndArrayPlugin;	import com.greensock.plugins.TweenPlugin;	import com.greensock.TweenLite;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.InteractiveObject;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.text.TextField;	import ru.codestage.utils.display.GraphUtil;	import ru.codestage.utils.NumUtil;		/**	 * Advanced custom GreensockScroller component with easing and other options.	 * Please, check out all available settings in the <b>GreensockScrollerSettings</b>	 * class and an example at the bottom of this page.	 * You should add to the library path the greensock.swc (compiled GreenSock Tweening Platform library) to use	 * such features as scroll tweening, tweened elements hiding, and more	 *	 * @author focus | http://blog.codestage.ru (minor and major changes)	 * @author random (original idea and engine)	 * @see GreensockScrollerSettings	 * @see http://www.greensock.com/	 * @example You could set up your GreensockScroller this way:	 * <listing version="3.0">	 * import ru.codestage.ui.scroller.GreensockScroller;	 * var myScroll:GreensockScroller = new GreensockScroller();	 * myScroll.settings.eventsHandler = stage;	 * myScroll.settings.scrollingContent = pageContainer.pageContent;	 * myScroll.settings.mask = pageContainer.mask.height; // or 100 or pageContainer.mask	 * myScroll.settings.slider = scrollerGraphics.slider;	 * myScroll.settings.sliderArea = 20; // or scrollerGraphics.sliderBackground	 * myScroll.init();</listing>	 * or like this:	 * <listing version="3.0">	 * import ru.codestage.ui.scroller.GreensockScroller;	 * import ru.codestage.ui.scroller.GreensockScrollerSettings;	 * var settings:GreensockScrollerSettings = new GreensockScrollerSettings();	 * settings.eventsHandler = stage;	 * settings.scrollingContent = pageContainer.pageContent;	 * settings.mask = pageContainer.mask;	 * settings.slider = scrollerGraphics.slider;	 * settings.sliderArea = scrollerGraphics.sliderBackground;	 * var myScroll:GreensockScroller = new GreensockScroller();	 * myScroll.init(settings);</listing>	 */	public class GreensockScroller extends Object	{				/**		 * Visual elements disabling style. This style prevents disabling at all		 * @see GreensockScrollerSettings#arrowsHideUnused		 * @see GreensockScrollerSettings#completeHideUnused		 */		public static const DISABLE_TYPE_NONE:uint = 0;				/**		 * Visual elements disabling style. This style allows to hide elements instantly or using fading		 * @see GreensockScrollerSettings#arrowsHideUnused		 * @see GreensockScrollerSettings#arrowsHideUnusedDuration		 * @see GreensockScrollerSettings#completeHideUnused		 * @see GreensockScrollerSettings#completeHideUnusedDuration		 */		public static const DISABLE_TYPE_VISIBLE:uint = 1;				/**		 * Visual elements disabling style. This style allows to disable elements making them gray-colored instantly or smoothly		 * @see GreensockScrollerSettings#arrowsHideUnused		 * @see GreensockScrollerSettings#arrowsHideUnusedDuration		 * @see GreensockScrollerSettings#completeHideUnused		 * @see GreensockScrollerSettings#completeHideUnusedDuration		 */		public static const DISABLE_TYPE_GRAY:uint = 2;				/**		 * Is user drags scroller's slider		 */		public var sliderIsDragging:Boolean = false;				private var _sliderIsMoving:Boolean = false;		private var _wholeScrollHided:Boolean = false;		private var _stillTweening:Boolean = false;		private var _scrollImmediately:Boolean = false;		private var _settings:GreensockScrollerSettings = null;				public function get sliderPosition():Number 		{			var position:Number;			if (_settings.sliderArea)			{				if (!_settings.horizontalSlider)				{					position = _settings.slider.y;				}				else				{					position = _settings.slider.x;				}			}			else			{				position = _settings.sliderTimeline.currentFrame-1;			}			return position;		}				public function set sliderPosition(value:Number):void 		{			if (_settings.sliderArea)			{				if (!_settings.horizontalSlider)				{					_settings.slider.y = value;				}				else				{					_settings.slider.x = value;				}			}			else			{				_settings.sliderTimeline.gotoAndStop(value+1);			}		}				/**		 * Scroller settings		 */		public function get settings():GreensockScrollerSettings		{			if (!_settings) _settings = new GreensockScrollerSettings();			return _settings;		}				public function GreensockScroller():void		{			TweenPlugin.activate([EndArrayPlugin, ColorMatrixFilterPlugin, AutoAlphaPlugin]);		}				/**		 * Call it every time you create a scroller after filling settings. See an example for more info		 * @param	initSettings You could pass the instance of GreensockScrollerSettings here. See an example for more info		 */		public function init(initSettings:Object = null):void		{			if (initSettings != null)			{				if (initSettings is GreensockScrollerSettings)				{					this._settings = (initSettings as GreensockScrollerSettings);				}				else				{					for (var sTag:String in initSettings)					{						if (this._settings[sTag])						{							this._settings[sTag] = initSettings[sTag];						}					}				}			}						if ((!_settings.eventsHandler)||(!_settings.scrollingContent)||(!_settings.mask))			{				throw new Error("Ensure you're setted eventsHandler, scrollingContent, mask properties for the GreensockScroller settings");				return;			}						if ((_settings.sliderArea != null)&&(_settings.sliderTimeline != null))			{				throw new Error("sliderArea and sliderTimeline GreensockScroller settings are not compatible with each other");				return;			}						if ((_settings.slider != null)&&((_settings.sliderTimeline == null)&&(_settings.sliderArea == null)))			{				throw new Error("You should set 'sliderArea' or 'sliderTimeline' to use 'slider' GreensockScroller setting!");				return;			}			_initListeners();		}				/**		 * Call it every time you wish to disable all GreensockScroller behaviour and release all assigned graphics		 */		public function uninit(e:Event = null):void		{			_uninitListeners();			_settings = null;			sliderIsDragging = false;			_sliderIsMoving = false;			_stillTweening = false;		}				private function _initListeners():void		{			if (_settings.slider)			{				_settings.slider.addEventListener(MouseEvent.MOUSE_DOWN, _onSliderMouseDown);				_settings.slider.addEventListener(MouseEvent.MOUSE_UP, _onMouseUp);			}			_settings.eventsHandler.addEventListener(MouseEvent.MOUSE_UP, _onMouseUp);			_settings.scrollingContent.addEventListener(MouseEvent.MOUSE_UP, _onMouseUp);			_settings.scrollingContent.addEventListener(Event.REMOVED_FROM_STAGE, uninit);			_settings.eventsHandler.addEventListener(Event.REMOVED_FROM_STAGE, uninit);						if (_settings.arrowUp)			{				if (_settings.arrowsOverAsDown)				{					_settings.arrowUp.addEventListener(MouseEvent.MOUSE_OUT, _onUpBtnMU);					_settings.arrowUp.addEventListener(MouseEvent.MOUSE_OVER, _onUpBtnMD);				}				else				{					_settings.eventsHandler.addEventListener(MouseEvent.MOUSE_UP, _onUpBtnMU);					_settings.arrowUp.addEventListener(MouseEvent.MOUSE_UP, _onUpBtnMU);					_settings.arrowUp.addEventListener(MouseEvent.MOUSE_DOWN, _onUpBtnMD);				}			}						if (_settings.arrowDown)			{				if (_settings.arrowsOverAsDown)				{					_settings.arrowDown.addEventListener(MouseEvent.MOUSE_OUT, _onDownBtnMU);					_settings.arrowDown.addEventListener(MouseEvent.MOUSE_OVER, _onDownBtnMD);				}				else				{					_settings.eventsHandler.addEventListener(MouseEvent.MOUSE_UP, _onDownBtnMU);					_settings.arrowDown.addEventListener(MouseEvent.MOUSE_UP, _onDownBtnMU);					_settings.arrowDown.addEventListener(MouseEvent.MOUSE_DOWN, _onDownBtnMD);				}			}						if (!_settings.wheelOwner)			{				_settings.wheelOwner = _settings.scrollingContent;			}			_settings.wheelOwner.addEventListener(MouseEvent.MOUSE_WHEEL, _onMouseWheel);						if (_getMaskHeight() >= _getContHeight())			{				_tryToHideWholeScroll();			}			else			{				_hideVisualElement(_settings.arrowUp, _settings.arrowsHideUnused, _settings.arrowsHideUnusedDuration);			}		}				private function _uninitListeners():void		{			if (_settings.slider)			{				_settings.slider.removeEventListener(MouseEvent.MOUSE_DOWN, _onSliderMouseDown);				_settings.slider.removeEventListener(MouseEvent.MOUSE_UP, _onMouseUp);				_settings.slider.removeEventListener(Event.ENTER_FRAME, _onEnterFrame);				TweenLite.killTweensOf(_settings.slider);			}						if (_settings.eventsHandler)			{				_settings.eventsHandler.removeEventListener(MouseEvent.MOUSE_UP, _onMouseUp);				_settings.eventsHandler.removeEventListener(MouseEvent.MOUSE_UP, _onUpBtnMU);				_settings.eventsHandler.removeEventListener(MouseEvent.MOUSE_UP, _onDownBtnMU);				_settings.eventsHandler.removeEventListener(Event.REMOVED_FROM_STAGE, uninit);			}						if (_settings.scrollingContent)			{				_settings.scrollingContent.removeEventListener(MouseEvent.MOUSE_UP, _onMouseUp);				_settings.scrollingContent.removeEventListener(Event.REMOVED_FROM_STAGE, uninit);								TweenLite.killTweensOf(_settings.scrollingContent);			}						if (_settings.arrowUp)			{				if (_settings.arrowsOverAsDown)				{					_settings.arrowUp.removeEventListener(MouseEvent.MOUSE_OUT, _onUpBtnMU);					_settings.arrowUp.removeEventListener(MouseEvent.MOUSE_OVER, _onUpBtnMD);				}				else				{					_settings.arrowUp.removeEventListener(MouseEvent.MOUSE_UP, _onUpBtnMU);					_settings.arrowUp.removeEventListener(MouseEvent.MOUSE_DOWN, _onUpBtnMD);				}				_settings.arrowUp.removeEventListener(Event.ENTER_FRAME, _scrollUp);				TweenLite.killTweensOf(_settings.arrowUp);			}						if (_settings.arrowDown)			{				if (_settings.arrowsOverAsDown)				{					_settings.arrowDown.removeEventListener(MouseEvent.MOUSE_OUT, _onDownBtnMU);					_settings.arrowDown.removeEventListener(MouseEvent.MOUSE_OVER, _onDownBtnMD);				}				else				{					_settings.arrowDown.removeEventListener(MouseEvent.MOUSE_UP, _onDownBtnMU);					_settings.arrowDown.removeEventListener(MouseEvent.MOUSE_DOWN, _onDownBtnMD);				}				_settings.arrowDown.removeEventListener(Event.ENTER_FRAME, _scrollDown);				TweenLite.killTweensOf(_settings.arrowDown);			}						if (_settings.wheelOwner)			{				_settings.wheelOwner.removeEventListener(MouseEvent.MOUSE_WHEEL, _onMouseWheel);			}		}				private function _onMouseWheel(e:MouseEvent):void		{			if (_getContHeight() < _getMaskHeight()) return;			var dir:Number;						if (e.delta > 0) dir = 2;			else if (e.delta < 0) dir = 1;						if (!_settings.step)			{				scroll(dir, NumUtil.fastAbs(e.delta * _settings.wheelSpeed));			}			else			{				scroll(dir, _settings.wheelSpeed);			}		}				private function _onSliderMouseDown(e:MouseEvent):void		{			if (_settings.slider)			{				if (_settings.sliderArea != null)				{					var areaHeight:Number = _getSliderAreaHeight();					if (_settings.horizontalSlider)					{						_settings.slider.startDrag(false, new Rectangle(0, _settings.slider.y, areaHeight, 0));					}					else					{						_settings.slider.startDrag(false, new Rectangle(_settings.slider.x, 0, 0, areaHeight));					}				}								sliderIsDragging = true;				_sliderIsMoving = true;				_settings.slider.addEventListener(Event.ENTER_FRAME, _onEnterFrame);			}		}				private function _onMouseUp(e:MouseEvent):void		{			//e.stopPropagation();			if ((_settings.slider)&&(sliderIsDragging))			{				if (_settings.sliderArea)				{					_settings.slider.stopDrag();				}								sliderIsDragging = false;				_settings.slider.removeEventListener(Event.ENTER_FRAME, _onEnterFrame);				slide();			}		}				private function _onEnterFrame(e:Event):void		{			if (_settings.sliderTimeline)			{				var frame:int;				var area:DisplayObject = _settings.sliderTimeline;								if (_settings.sliderTimelineArea)				{					area = _settings.sliderTimelineArea;				}								if (!_settings.horizontalSlider)				{					frame = area.mouseY / area.height * (_settings.sliderTimeline.totalFrames-1);				}				else				{					frame = area.mouseX / area.width * (_settings.sliderTimeline.totalFrames-1);				}				frame++;								if (frame < 1)				{					frame = 1;				}				else if (frame > _settings.sliderTimeline.totalFrames)				{					frame = _settings.sliderTimeline.totalFrames;				}								_settings.sliderTimeline.gotoAndStop(frame);			}						slide();		}				private function _onUpBtnMU(e:MouseEvent):void		{			if (_settings.step == 0)			{				_settings.arrowUp.removeEventListener(Event.ENTER_FRAME, _scrollUp);			}		}				private function _onUpBtnMD(e:MouseEvent):void		{			if (!sliderIsDragging)			{				if (_settings.step == 0)				{					_settings.arrowUp.addEventListener(Event.ENTER_FRAME, _scrollUp);				}				else				{					scroll(2,_settings.arrowsScrollSpeed);				}			}		}				private function _onDownBtnMU(e:MouseEvent):void		{			if (_settings.step == 0)			{				_settings.arrowDown.removeEventListener(Event.ENTER_FRAME, _scrollDown);			}		}				private function _onDownBtnMD(e:MouseEvent):void		{			if (!sliderIsDragging)			{				if (_settings.step == 0)				{					_settings.arrowDown.addEventListener(Event.ENTER_FRAME, _scrollDown);				}				else				{					scroll(1,_settings.arrowsScrollSpeed);				}			}		}				private function _scrollDown(e:Event):void		{			scroll(1,_settings.arrowsScrollSpeed);		}				private function _scrollUp(e:Event):void		{			scroll(2,_settings.arrowsScrollSpeed);		}				/**		 * Call it to scroll content to the beginning		 * @param	instantly Set it to true for instant scrolling, without tweening		 */		public function scrollToBegin(instantly:Boolean = false):void		{			_scrollImmediately = instantly;			if (_settings.slider)			{				if (_settings.horizontalSlider)				{					_settings.slider.x = 0;				}				else				{					_settings.slider.y = 0;				}				slide();			}			else			{				if (_settings.step == 0)				{					if (!_settings.horizontal)					{						scroll(2, -_settings.scrollingContent.y);					}					else					{						scroll(2, -_settings.scrollingContent.x);					}				}				else				{					if (!_settings.horizontal)					{						scroll(2, -Math.floor(_settings.scrollingContent.y/_settings.step));					}					else					{						scroll(2, -Math.floor(_settings.scrollingContent.x/_settings.step));					}				}			}			_scrollImmediately = false;		}				/**		 * Call it to scroll content to the end		 * @param	instantly Set it to true for instant scrolling, without tweening		 */		public function scrollToEnd(instantly:Boolean = false):void		{			_scrollImmediately = instantly;			if (_settings.slider)			{				if (_settings.horizontalSlider)				{					_settings.slider.x = _getSliderAreaHeight();				}				else				{					_settings.slider.y = _getSliderAreaHeight();				}				slide();			}			else			{				//TODO: need to implement (			}			_scrollImmediately = false;		}				/**		 * Use to set scroller's slider position. Use slide() to update content position		 * @param	moveTo Slider position in its container		 * @see #slide		 */		public function setSlider(moveTo:Number = NaN):void		{			var maskHeight:Number = _getMaskHeight();			var areaHeight:Number = _getSliderAreaHeight();			var nContY:Number = 0;						if (_settings.scrollingContent is TextField && _settings.textFieldMode)			{				nContY = (_settings.scrollingContent as TextField).scrollV - 1;			}			else			{				if (moveTo == moveTo)				{					nContY = moveTo;				}				else				{					if (!_settings.horizontal)					{						nContY = _settings.scrollingContent.y;					}					else					{						nContY = _settings.scrollingContent.x;					}				}			}						if (_settings.scrollingContent is TextField && _settings.textFieldMode)			{				if (_settings.slider)				{					sliderPosition = Math.floor(((areaHeight) * nContY) / maskHeight);				}			}			else			{				var nContHeight:Number = _getContHeight();				if (nContHeight < maskHeight) return;								var nValue:int = (NumUtil.fastAbs(nContY) / (nContHeight - maskHeight)) * (areaHeight);								if (_settings.slider)				{					sliderPosition = nValue;				}			}		}				/**		 * Checks if content smaller or bigger than mask and hides or shows whole scroller, 		 * its arrows or not hiding anything at all depending on arrowsHideUnused and completeHideUnused settings		 * @see GreensockScrollerSettings#arrowsHideUnused		 * @see GreensockScrollerSettings#completeHideUnused		 */		public function checkAndSwitchHide():void		{			var maskHeight:Number = _getMaskHeight();			var nContHeight:Number = _getContHeight();						if (nContHeight < maskHeight)			{				if (!_wholeScrollHided)				{					_tryToHideWholeScroll();				}				if (!_scrollImmediately) return;			}			else			{				if (_wholeScrollHided)				{					_tryToShowAllScroll();				}			}		}				/**		 * Updates content position depending on slider position		 * @see #setSlider		 */		public function slide():void		{			var maskHeight:Number = _getMaskHeight();			var areaHeight:Number = _getSliderAreaHeight();			var sliderPos:Number = sliderPosition;						if (_settings.scrollingContent is TextField && _settings.textFieldMode)			{				if (_settings.slider)				{					_setContY(Math.floor((maskHeight * sliderPos) / areaHeight));				}			}			else			{				var nContHeight:Number = _getContHeight();								if (nContHeight < maskHeight)				{					if (!_wholeScrollHided)					{						_tryToHideWholeScroll();					}					if (!_scrollImmediately) return;				}				else				{					if (_wholeScrollHided)					{						_tryToShowAllScroll();					}				}								if (_settings.step)				{					var nDiff:Number = 0;					if (_settings.slider)					{						nDiff = -(((nContHeight - maskHeight) * sliderPos) / areaHeight);					}					_setContY(NumUtil.roundTo(nDiff, _settings.step * _settings.wheelSpeed));				}				else				{					if (_settings.slider)					{						_setContY( -(((nContHeight - maskHeight) * sliderPos) / areaHeight));					}				}			}		}				/**		 * Use to scroll content to the given direction on the given coefficient		 * @param	direction Scrolling direction. 1 - down, 2 - up		 * @param	coeff Scrolling coefficient (multimlyer for step or just raw coefficient)		 */		public function scroll(direction:uint=1, coeff:Number=1):void		{			var maskHeight:Number = _getMaskHeight();			var nContHeight:Number = _getContHeight();			var nContY:Number;						if (direction == 1)			{				if (_settings.scrollingContent is TextField && _settings.textFieldMode)				{					if ((_settings.scrollingContent as TextField).scrollV < (_settings.scrollingContent as TextField).maxScrollV)					{						_setContY((_settings.scrollingContent as TextField).scrollV + coeff);					}				}				else				{					if (!_settings.horizontal)					{						nContY = _settings.scrollingContent.y;					}					else					{						nContY = _settings.scrollingContent.x;					}										if (nContHeight < maskHeight)					{						if (!_wholeScrollHided)						{							_tryToHideWholeScroll();						}						if (!_scrollImmediately) return;					}					else					{						if (_wholeScrollHided)						{							_tryToShowAllScroll();						}					}										if (_settings.step)					{						if (nContY - _settings.step * coeff > maskHeight - (nContHeight+_settings.step*coeff))						{							_setContY(NumUtil.roundTo(nContY - _settings.step * coeff, _settings.step * coeff));													}						else						{							_setContY(NumUtil.roundTo(maskHeight - nContHeight, _settings.step * coeff));						}					}					else					{						if (nContY - coeff > maskHeight - nContHeight)						{							_setContY(nContY - coeff);						}						else						{							_setContY(maskHeight - nContHeight);						}					}				}			}			else			{				if (_settings.scrollingContent is TextField && _settings.textFieldMode)				{					if ((_settings.scrollingContent as TextField).scrollV > 1)					{						_setContY((_settings.scrollingContent as TextField).scrollV - coeff);					}				}				else				{										if (!_settings.horizontal)					{						nContY = _settings.scrollingContent.y;					}					else					{						nContY = _settings.scrollingContent.x;					}										if (nContHeight < maskHeight)					{						if (!_wholeScrollHided)						{							_tryToHideWholeScroll();						}						if (!_scrollImmediately) return;					}					else					{						if (_wholeScrollHided)						{							_tryToShowAllScroll();						}					}										if (_settings.step)					{						if (nContY + _settings.step * coeff < 0)						{							_setContY(nContY + _settings.step*coeff);						}						else						{							_setContY(0);						}					}					else					{						if (nContY  + coeff < 0)						{							_setContY(nContY + coeff);						}						else						{							_setContY(0);						}					}				}			}						if (_settings.slider&&(_settings.easing == null))			{				setSlider();			}		}				private function _setContY(p_nY:Number):void		{			if ((_settings.easing != null)&&(!_scrollImmediately)&&(!(_settings.scrollingContent is TextField && _settings.textFieldMode)))			{				if (_settings.step && _stillTweening) return;								_stillTweening = true;				if (!_settings.horizontal)				{					TweenLite.to(_settings.scrollingContent, _settings.easeDuration, { y:p_nY, ease:_settings.easing, overwrite:_settings.overwriteEasing, onUpdate:_onTweenUpdate, onComplete:_onTweenComplete } );				}				else				{					TweenLite.to(_settings.scrollingContent, _settings.easeDuration, { x:p_nY, ease:_settings.easing, overwrite:_settings.overwriteEasing, onUpdate:_onTweenUpdate, onComplete:_onTweenComplete } );				}			}			else			{				if (_settings.scrollingContent is TextField && _settings.textFieldMode)				{					(_settings.scrollingContent as TextField).scrollV = p_nY;				}				else				{					if (!_settings.horizontal)					{						_settings.scrollingContent.y = p_nY;					}					else					{						_settings.scrollingContent.x = p_nY;					}				}			}						var mskHeight:Number = _getMaskHeight();			var contHeight:Number = _getContHeight();						var bIsAtBegin:Boolean;			var bIsAtEnd:Boolean;						if (_settings.scrollingContent is TextField && _settings.textFieldMode)			{				bIsAtBegin = Boolean(p_nY <= 0);				bIsAtEnd = Boolean(p_nY >= contHeight);			}			else			{				bIsAtBegin = Boolean(p_nY >= -1);				bIsAtEnd = Boolean(p_nY <= mskHeight - contHeight);			}							if (_settings.arrowsHideUnused != DISABLE_TYPE_NONE)			{				_hideVisualElement(_settings.arrowUp, _settings.arrowsHideUnused, _settings.arrowsHideUnusedDuration, bIsAtBegin);				_hideVisualElement(_settings.arrowDown, _settings.arrowsHideUnused, _settings.arrowsHideUnusedDuration, bIsAtEnd);			}		}				private function _onTweenUpdate():void		{			if (!sliderIsDragging && !_sliderIsMoving)			{				setSlider();			}		}				private function _onTweenComplete():void		{			if (!sliderIsDragging && !_sliderIsMoving)			{				setSlider();			}3						_sliderIsMoving = false;			_stillTweening = false;		}				private function _getSliderAreaHeight():Number		{			var nArea:Number = 0;						if (_settings.sliderArea)			{				if (_settings.sliderArea is DisplayObject)				{					if (_settings.horizontalSlider)					{						nArea = _settings.sliderArea.width;					}					else					{						nArea = _settings.sliderArea.height;					}				}				else				{					nArea = Number(_settings.sliderArea);				}								if (_settings.horizontalSlider)				{					if (_settings.slider)					{						nArea -= _settings.slider.width;					}				}				else				{					if (_settings.slider)					{						nArea -= _settings.slider.height;					}				}			}			else			{				/*if (_settings.horizontalSlider)				{					nArea = _settings.sliderTimeline.width;					if (_settings.slider)					{						nArea -= _settings.slider.width;					}				}				else				{					nArea = _settings.sliderTimeline.height;					if (_settings.slider)					{						nArea -= _settings.slider.height;					}				}*/				nArea = _settings.sliderTimeline.totalFrames-1;			}							return nArea;		}				private function _getMaskHeight():Number		{			if (_settings.scrollingContent is TextField && _settings.textFieldMode)			{				return (_settings.scrollingContent as TextField).maxScrollV;			}			else if (_settings.mask is DisplayObject)			{				if (!_settings.horizontal)				{					return _settings.mask.height;				}				else				{					return _settings.mask.width;				}			}			else			{				return Number(_settings.mask);			}		}				private function _getContHeight():Number		{			var height:Number;						if (_settings.scrollingContent is TextField && _settings.textFieldMode)			{				height = (_settings.scrollingContent as TextField).maxScrollV-1;			}			else			{				if (!_settings.horizontal)				{					height = GraphUtil.getFullBounds(_settings.scrollingContent).height;				}				else				{					height = GraphUtil.getFullBounds(_settings.scrollingContent).width;				}			}						return height;		}				private function _tryToShowAllScroll():void		{			if (_settings.completeHideUnused != DISABLE_TYPE_NONE)			{				if (_settings.slider)				{					_hideVisualElement(_settings.slider, _settings.completeHideUnused, _settings.completeHideUnusedDuration, false);				}								if (_settings.arrowUp)				{					_hideVisualElement(_settings.arrowUp, _settings.completeHideUnused, _settings.completeHideUnusedDuration, false);				}								if (_settings.arrowDown)				{					_hideVisualElement(_settings.arrowDown, _settings.completeHideUnused, _settings.completeHideUnusedDuration, false);				}								if (_settings.sliderArea is DisplayObject)				{					_hideVisualElement(DisplayObject(_settings.sliderArea), _settings.completeHideUnused, _settings.completeHideUnusedDuration, false);				}				if (_settings.sliderTimelineArea is DisplayObject)				{					_hideVisualElement(DisplayObject(_settings.sliderTimelineArea), _settings.completeHideUnused, _settings.completeHideUnusedDuration, false);				}				if (_settings.sliderTimeline is DisplayObject)				{					_hideVisualElement(DisplayObject(_settings.sliderTimeline), _settings.completeHideUnused, _settings.completeHideUnusedDuration, false);				}			}						if (_settings.arrowsHideUnused != DISABLE_TYPE_NONE)			{				var mskHeight:Number = _getMaskHeight();				var contHeight:Number = _getContHeight();								var bIsAtBegin:Boolean = Boolean(_settings.scrollingContent.y >= -1);				var bIsAtEnd:Boolean = Boolean(_settings.scrollingContent.y <= mskHeight - contHeight);								if (_settings.arrowUp)				{					_hideVisualElement(_settings.arrowUp, _settings.arrowsHideUnused, _settings.arrowsHideUnusedDuration, bIsAtBegin);				}				if (_settings.arrowDown)				{					_hideVisualElement(_settings.arrowDown, _settings.arrowsHideUnused, _settings.arrowsHideUnusedDuration, bIsAtEnd);				}			}						_wholeScrollHided = false;		}				private function _tryToHideWholeScroll():void		{			if (_settings.completeHideUnused != DISABLE_TYPE_NONE)			{				if (_settings.slider)				{					_hideVisualElement(_settings.slider, _settings.completeHideUnused, _settings.completeHideUnusedDuration);				}								if (_settings.arrowUp)				{					_hideVisualElement(_settings.arrowUp, _settings.completeHideUnused, _settings.completeHideUnusedDuration);				}								if (_settings.arrowDown)				{					_hideVisualElement(_settings.arrowDown, _settings.completeHideUnused, _settings.completeHideUnusedDuration);				}								if (_settings.sliderArea is DisplayObject)				{					_hideVisualElement(DisplayObject(_settings.sliderArea), _settings.completeHideUnused, _settings.completeHideUnusedDuration);				}				if (_settings.sliderTimeline is DisplayObject)				{					_hideVisualElement(DisplayObject(_settings.sliderTimeline), _settings.completeHideUnused, _settings.completeHideUnusedDuration);				}				if (_settings.sliderTimelineArea is DisplayObject)				{					_hideVisualElement(DisplayObject(_settings.sliderTimelineArea), _settings.completeHideUnused, _settings.completeHideUnusedDuration);				}			}			else if (_settings.arrowsHideUnused != DISABLE_TYPE_NONE)			{				if (_settings.arrowUp)				{					_hideVisualElement(_settings.arrowUp, _settings.arrowsHideUnused, _settings.arrowsHideUnusedDuration);				}				if (_settings.arrowDown)				{					_hideVisualElement(_settings.arrowDown, _settings.arrowsHideUnused, _settings.arrowsHideUnusedDuration);				}			}						_wholeScrollHided = true;		}				private function _hideVisualElement(p_doElement:DisplayObject, p_nHidingType:uint, p_nDuration:Number, p_bHide:Boolean = true):void		{			if (p_nHidingType == DISABLE_TYPE_NONE)			{				return;			}			else if (p_nHidingType == DISABLE_TYPE_VISIBLE)			{				//p_doElement.visible = !p_bHide;				TweenLite.to(p_doElement, p_nDuration, { overwrite:OverwriteManager.AUTO, autoAlpha:uint(!p_bHide)} );			}			else if (p_nHidingType == DISABLE_TYPE_GRAY)			{				if (p_bHide)				{					TweenLite.to(p_doElement, p_nDuration, { overwrite:OverwriteManager.AUTO, colorMatrixFilter:{colorize:0x999999}} );				}				else				{					TweenLite.to(p_doElement, p_nDuration, { overwrite:OverwriteManager.AUTO, colorMatrixFilter:{}} );				}								if (p_doElement is InteractiveObject)				{					InteractiveObject(p_doElement).mouseEnabled = !p_bHide;					if (p_doElement is DisplayObjectContainer)					{						DisplayObjectContainer(p_doElement).mouseChildren = !p_bHide;					}				}			}		}			}}